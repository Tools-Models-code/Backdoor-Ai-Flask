services:
  - type: web
    name: backdoor-ai
    env: python
    plan: free
    buildCommand: |
      # Install system dependencies for code-server and Docker
      apt-get update && apt-get install -y curl wget git gnupg build-essential apt-transport-https ca-certificates lsb-release
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
      apt-get update && apt-get install -y docker-ce-cli

      # Install code-server
      curl -fsSL https://code-server.dev/install.sh | sh

      # Install Python dependencies
      pip install -r requirements.txt

      # Run database migrations
      python -m flask db upgrade

      # Create directories for initialization
      echo "Creating necessary directories..."
      mkdir -p /tmp/backdoor/{tools,cache,logs,data,config,vscode/workspaces,vscode/sessions,microagents,runtime,plugins,extensions,templates,static,uploads,downloads,backups}

      # Create Docker network if it doesn't exist
      if command -v docker &> /dev/null; then
        if ! docker network ls | grep -q backdoor-network; then
          echo "Creating Docker network: backdoor-network"
          docker network create backdoor-network || true
        fi
      fi

      echo "Backdoor initialized at $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > /tmp/backdoor/initialized
      echo "Pre-boot initialization complete!"

      # Create microagents directory and copy files
      mkdir -p app/backdoor/microagents
      if [ -d "OpenHands/microagents" ]; then
        cp -r OpenHands/microagents/* app/backdoor/microagents/
        find app/backdoor/microagents -type f -name "*.md" -exec sed -i 's/openhands/backdoor/g' {} \;
        find app/backdoor/microagents -type f -name "*.md" -exec sed -i 's/OpenHands/Backdoor/g' {} \;
      fi
    startCommand: gunicorn --bind 0.0.0.0:$PORT --workers 2 --threads 4 wsgi:app
    autoDeploy: true
      - key: LLM_PROVIDER
        value: "together"
      - key: GITHUB_TOKEN
        sync: false
      - key: DATABASE_URL
        fromDatabase:
          name: backdoor-db
          property: connectionString
      - key: MCP_ENABLED
        value: "true"
      - key: MCP_LOG_LEVEL
        value: "INFO"
      - key: VSCODE_SERVER_PATH
        value: "/usr/bin/code-server"
      - key: BACKDOOR_ENV
        value: "production"
      - key: BACKDOOR_DOCKER_ENABLED
        value: "true"
      - key: BACKDOOR_DOCKER_IMAGE
        value: "backdoor/runtime:latest"
      - key: BACKDOOR_DOCKER_NETWORK
        value: "backdoor-network"
    healthCheckPath: /api/health

databases:
  - name: backdoor-db
    plan: free
    postgresMajorVersion: 14